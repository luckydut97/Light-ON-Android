package com.luckydut97.lighton.feature_auth.login.ui

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.windowInsetsPadding
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.platform.LocalView
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.view.WindowInsetsCompat
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material3.Scaffold
import androidx.lifecycle.viewmodel.compose.viewModel
import com.luckydut97.lighton.core.ui.components.LightonButton
import com.luckydut97.lighton.core.ui.components.LoginInputField
import com.luckydut97.lighton.core.ui.components.CommonTopBar
import com.luckydut97.lighton.core.ui.theme.AssistiveColor
import com.luckydut97.lighton.core.ui.theme.BrandColor
import com.luckydut97.lighton.core.ui.theme.ClickableColor
import com.luckydut97.lighton.core.ui.theme.InfoTextColor
import com.luckydut97.lighton.core.ui.theme.LightonTheme
import com.luckydut97.lighton.core.ui.theme.PretendardFamily
import com.luckydut97.lighton.feature.auth.R
import com.luckydut97.lighton.feature_auth.login.viewmodel.LoginViewModel
import com.luckydut97.domain.model.User
import kotlin.math.min

@Composable
fun EmailLoginScreen(
    onBackClick: () -> Unit = {},
    onLoginClick: () -> Unit = {},
    onLoginSuccess: (User, String, String) -> Unit = { _, _, _ -> },
    onKakaoLoginClick: () -> Unit = {},
    onGoogleLoginClick: () -> Unit = {},
    onSignUpClick: () -> Unit = {},
    onFindIdClick: () -> Unit = {},
    onFindPasswordClick: () -> Unit = {},
    viewModel: LoginViewModel = viewModel()
) {
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var isEmailFocused by remember { mutableStateOf(false) }
    var isPasswordFocused by remember { mutableStateOf(false) }

    // ViewModel ÏÉÅÌÉú Í¥ÄÏ∞∞
    val uiState by viewModel.uiState.collectAsState()

    // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ïãú ÏΩúÎ∞± Ìò∏Ï∂ú
    LaunchedEffect(uiState.isSuccess, uiState.user) {
        val user = uiState.user
        if (uiState.isSuccess && user != null) {
            // Ïã§Ï†ú ÌÜ†ÌÅ∞ Ï†ïÎ≥¥Îäî ÏïÑÏßÅ ÎèÑÎ©îÏù∏Ïóê Íµ¨ÌòÑÎêòÏßÄ ÏïäÏïòÏúºÎØÄÎ°ú ÏûÑÏãúÎ°ú ÌïòÎìúÏΩîÎî©
            // Ï∂îÌõÑ ÏÑúÎ≤Ñ Ïó∞Îèô ÏôÑÏÑ± Ïãú user Îç∞Ïù¥ÌÑ∞ÏôÄ ÌÜ†ÌÅ∞ Ïã§Ï†ú Î∞òÌôòÍ∞í ÏÇ¨Ïö©
            onLoginSuccess(user, "temp_access_token_from_ui", "temp_refresh_token_from_ui")
        }
    }

    // ÏóêÎü¨ Î©îÏãúÏßÄ Î°úÍπÖ (ÎîîÎ≤ÑÍπÖÏö©)
    LaunchedEffect(uiState.errorMessage) {
        uiState.errorMessage?.let { error ->
            println("üî¥ Î°úÍ∑∏Ïù∏ Ïò§Î•ò: $error")
        }
    }

    // Î∞òÏùëÌòï ÎîîÏûêÏù∏ÏùÑ ÏúÑÌïú Ïä§ÏºÄÏùº Ìå©ÌÑ∞ Í≥ÑÏÇ∞
    val screenWidth = LocalConfiguration.current.screenWidthDp.dp
    val screenHeight = LocalConfiguration.current.screenHeightDp.dp

    // Í∏∞Ï§Ä Ìï¥ÏÉÅÎèÑ ÎåÄÎπÑ ÎπÑÏú® Í≥ÑÏÇ∞ (402x874 Í∏∞Ï§Ä)
    val widthRatio = screenWidth / 402.dp
    val heightRatio = screenHeight / 874.dp
    val scaleFactor = min(widthRatio, heightRatio)

    LightonTheme {
        Scaffold { paddingValues ->
            Surface(
                modifier = Modifier.fillMaxSize(),
                color = Color.White
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(paddingValues)
                ) {
                    // CommonTopBar Ï∂îÍ∞Ä
                    CommonTopBar(
                        title = "",
                        onBackClick = onBackClick,

                        )

                    // TopBarÏôÄ Î°úÍ≥† ÏÇ¨Ïù¥ 11dp Í∞ÑÍ≤©
                    Spacer(modifier = Modifier.height((80 * scaleFactor).dp))

                    // Î©îÏù∏ ÏΩòÌÖêÏ∏† - ÏúÑÏ™ΩÏóê ÏúÑÏπò
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(horizontal = (20 * scaleFactor).dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        // Î°úÍ≥† - 140*44.7
                        Image(
                            painter = painterResource(id = R.drawable.ic_type_purple),
                            contentDescription = "Light On Î°úÍ≥†",
                            modifier = Modifier
                                .width((140 * scaleFactor).dp)
                                .height((44.7 * scaleFactor).dp)
                        )

                        // Î°úÍ≥†ÏôÄ ÏïÑÏù¥Îîî ÏûÖÎ†• ÌïÑÎìú ÏÇ¨Ïù¥ 11dp Í∞ÑÍ≤©
                        Spacer(modifier = Modifier.height((100 * scaleFactor).dp))

                        // ÏûÖÎ†• ÌïÑÎìú ÏÑπÏÖò
                        Column(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            // ÏïÑÏù¥Îîî ÏûÖÎ†• ÌïÑÎìú
                            LoginInputField(
                                label = "ÏïÑÏù¥Îîî",
                                value = email,
                                onValueChange = { email = it },
                                modifier = Modifier
                                    .width((334 * scaleFactor).dp),
                                placeholder = "ÏïÑÏù¥Îîî (Ïù¥Î©îÏùº Ï£ºÏÜå)",
                                isFocused = isEmailFocused,
                                onFocusChanged = { isEmailFocused = it },
                                keyboardType = KeyboardType.Email
                            )

                            // 24dp Í∞ÑÍ≤©
                            Spacer(modifier = Modifier.height((24 * scaleFactor).dp))

                            // ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†• ÌïÑÎìú
                            LoginInputField(
                                label = "ÎπÑÎ∞ÄÎ≤àÌò∏",
                                value = password,
                                onValueChange = { password = it },
                                modifier = Modifier
                                    .width((334 * scaleFactor).dp),
                                placeholder = "ÎπÑÎ∞ÄÎ≤àÌò∏",
                                isFocused = isPasswordFocused,
                                onFocusChanged = { isPasswordFocused = it },
                                keyboardType = KeyboardType.Password,
                                isPassword = true
                            )
                        }

                        // ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
                        uiState.errorMessage?.let { error ->
                            Spacer(modifier = Modifier.height((8 * scaleFactor).dp))
                            Text(
                                text = error,
                                color = Color.Red,
                                fontSize = (14 * scaleFactor).sp,
                                fontFamily = PretendardFamily,
                                textAlign = TextAlign.Center,
                                modifier = Modifier.width((334 * scaleFactor).dp)
                            )
                        }

                        // 23dp Í∞ÑÍ≤©
                        Spacer(modifier = Modifier.height((23 * scaleFactor).dp))

                        // Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
                        LightonButton(
                            text = "Î°úÍ∑∏Ïù∏",
                            modifier = Modifier
                                .width((334 * scaleFactor).dp)
                                .height(47.dp),
                            onClick = {
                                if (email.isNotEmpty() && password.isNotEmpty()) {
                                    println("üöÄ Î°úÍ∑∏Ïù∏ Î≤ÑÌäº ÌÅ¥Î¶≠ - Ïù¥Î©îÏùº: $email")
                                    viewModel.login(email, password)
                                } else {
                                    println("‚ö†Ô∏è Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÎπÑÏñ¥ÏûàÏùå")
                                }
                            },
                            borderWidth = -1.dp  // border Ï†úÍ±∞
                        )

                        // 23dp Í∞ÑÍ≤©
                        Spacer(modifier = Modifier.height((23 * scaleFactor).dp))

                        // ÎòêÎäî ÌÖçÏä§Ìä∏ÏôÄ ÏÑ†
                        Row(
                            modifier = Modifier.width((334 * scaleFactor).dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            // ÏôºÏ™Ω ÏÑ†
                            Box(
                                modifier = Modifier
                                    .weight(1f)
                                    .height((1 * scaleFactor).dp)
                                    .background(Color(0xFFF5F5F5))
                            )

                            // 17dp Ïó¨Î∞±
                            Spacer(modifier = Modifier.width((17 * scaleFactor).dp))

                            // ÎòêÎäî ÌÖçÏä§Ìä∏
                            Text(
                                text = "ÎòêÎäî",
                                color = AssistiveColor,
                                fontSize = (14 * scaleFactor).sp,
                                fontFamily = PretendardFamily,
                                fontWeight = FontWeight.SemiBold,
                            )

                            // 17dp Ïó¨Î∞±
                            Spacer(modifier = Modifier.width((17 * scaleFactor).dp))

                            // Ïò§Î•∏Ï™Ω ÏÑ†
                            Box(
                                modifier = Modifier
                                    .weight(1f)
                                    .height((1 * scaleFactor).dp)
                                    .background(Color(0xFFF5F5F5))
                            )
                        }

                        // 23dp Í∞ÑÍ≤©
                        Spacer(modifier = Modifier.height((23 * scaleFactor).dp))

                        // ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Î≤ÑÌäºÎì§ - 37*37
                        Row(
                            horizontalArrangement = Arrangement.spacedBy((24 * scaleFactor).dp)
                        ) {
                            // Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
                            Image(
                                painter = painterResource(id = R.drawable.ic_kakao_logo),
                                contentDescription = "Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏",
                                modifier = Modifier
                                    .size((37 * scaleFactor).dp)
                                    .clickable { onKakaoLoginClick() }
                            )

                            // Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
                            Image(
                                painter = painterResource(id = R.drawable.ic_google_logo),
                                contentDescription = "Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏",
                                modifier = Modifier
                                    .size((37 * scaleFactor).dp)
                                    .clickable { onGoogleLoginClick() }
                            )
                        }

                        // 23dp Í∞ÑÍ≤©
                        Spacer(modifier = Modifier.height((23 * scaleFactor).dp))

                        // ÌïòÎã® ÎßÅÌÅ¨Îì§
                        Row(
                            horizontalArrangement = Arrangement.Center,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "ÌöåÏõêÍ∞ÄÏûÖ",
                                color = ClickableColor,
                                modifier = Modifier
                                    .clickable { onSignUpClick() },
                                fontSize = (14 * scaleFactor).sp,
                                fontFamily = PretendardFamily,
                                fontWeight = FontWeight.SemiBold
                            )

                            // 18dp Ïó¨Î∞±
                            Spacer(modifier = Modifier.width((18 * scaleFactor).dp))

                            Text(
                                text = "|",
                                color = ClickableColor,
                                fontSize = (14 * scaleFactor).sp,
                                fontFamily = PretendardFamily
                            )

                            // 18dp Ïó¨Î∞±
                            Spacer(modifier = Modifier.width((18 * scaleFactor).dp))

                            Text(
                                text = "ÏïÑÏù¥Îîî Ï∞æÍ∏∞",
                                color = ClickableColor,
                                modifier = Modifier
                                    .clickable {
                                        // ÏïÑÎ¨¥ÏùºÎèÑ ÏïàÏùºÏñ¥ÎÇòÍ≤å Ìï®
                                    },
                                fontSize = (14 * scaleFactor).sp,
                                fontFamily = PretendardFamily,
                                fontWeight = FontWeight.SemiBold
                            )

                            // 18dp Ïó¨Î∞±
                            Spacer(modifier = Modifier.width((18 * scaleFactor).dp))

                            Text(
                                text = "|",
                                color = ClickableColor,
                                fontSize = (14 * scaleFactor).sp,
                                fontFamily = PretendardFamily
                            )

                            // 18dp Ïó¨Î∞±
                            Spacer(modifier = Modifier.width((18 * scaleFactor).dp))

                            Text(
                                text = "ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞",
                                color = ClickableColor,
                                modifier = Modifier
                                    .clickable {
                                        // ÏïÑÎ¨¥ÏùºÎèÑ ÏïàÏùºÏñ¥ÎÇòÍ≤å Ìï®
                                    },
                                fontSize = (14 * scaleFactor).sp,
                                fontFamily = PretendardFamily,
                                fontWeight = FontWeight.SemiBold
                            )
                        }
                    }
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun EmailLoginScreenPreview() {
    LightonTheme {
        EmailLoginScreen()
    }
}
